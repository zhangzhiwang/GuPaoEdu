<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- mybatis全局配置文件 -->
<configuration>
	<!-- 属性配置，其它地方可以使用“${}”来引用属性的值 -->
	<properties resource="db_1.properties">
	<!-- <properties url="file:///Users/zhangzhiwang/Desktop/db_2.properties"> -->	<!-- resource属性和url属性都可以引入外部文件，区别就是前者引用的俄式classpath下面的文件，后者引用磁盘全路经名的文件或者网络文件 -->
<!-- 		<property name="db.driver" value="com.mysql.jdbc.Driver" /> -->
	</properties>
	
	<settings>
		<setting name="logImpl" value="STDOUT_LOGGING"/>	<!-- 打印sql语句，此种方式不需要单独配置log4j；另一种方式是使用log4j，需要引入相关依赖 -->
		<setting name="cacheEnabled" value="true"/>	<!-- 开启二级缓存，默认是关闭的。开启之后要在需要使用二级缓存的mapper.xml里面用<cache>标签进行开启 -->
		<!-- “关闭”一级缓存
			注意：上面的“关闭”加上了双引号是因为以及缓存是默认开启的且不能关闭的，是的一级缓存没有开关。
			localCacheScope是本地缓存的范围，本地缓存就是一级缓存。由于一级缓存默认是会话级别的，所以localCacheScope的默认值是SESSION，将localCacheScope的作用范围调小，比如STATEMENT，只对一条sql有效，那么就相当于关闭了一级缓存
		 -->
<!-- 		<setting name="localCacheScope" value="STATEMENT"/> -->
<!-- 		<setting name="defaultExecutorType" value="BATCH"/> -->	<!-- 适用于批量操作 -->
		<setting name="mapUnderscoreToCamelCase" value="true"/>	<!-- 开启驼峰命名 -->
		<!-- <setting name="aggressiveLazyLoading" value="true"/> -->	<!-- 开启延迟加载方式1:使用lazyLoadingEnabled属性，如果A对象组合了B对象，当访问A对象的属性时（可能该属性不是B对象的属性）会出发对B对象的查询及映射 -->
		<!-- <setting name="lazyLoadingEnabled" value="true"/> -->	<!-- 延迟加载的全局开关，默认为false。打开后只有访问到被组合的对象时才回触发查询操作，这里的“访问”指外部对象get内嵌组合对象时，或者调用外部对象的equals,clone,hashCode,toString方法 -->
	</settings>

	<!-- 配置类型别名，mybatis内置了好多类型别名，具体可以看源码：org.apache.ibatis.type.TypeAliasRegistry -->
	<typeAliases>
		<typeAlias alias="user" type="com.asiainfo.entity.User" />
		<typeAlias alias="myTypeHandler" type="com.asiainfo.MyTypeHandler" />
	</typeAliases>
	
	<!-- 类型处理器，用于实现表字段类型和Java类型的映射，mybatis默认了很多类型处理器，可以看源码：org.apache.ibatis.type.TypeHandlerRegistry -->
	<typeHandlers>
		<!-- 自定义TypeHandler步骤：
			1、自定义类需要实现TypeHandler接口或继承BaseTypeHandler类
			2、在mybatis全局配置文件中注册
			3、并不是注册了之后所有该类型的映射都会走自定义的TypeHandler，而是在需要使用的地方加上它，比如resultMap里面使用typeHandler属性指定，插入的时候使用typeHandler属性指定自定义的类型处理器（注意：插入时使用typeHandler，其值不需要放在双引号里）
		 -->
		<typeHandler handler="com.asiainfo.MyTypeHandler"/>
	</typeHandlers>
	
	<!-- 对象工厂，mybatis在获取结果集之后要对目标pojo进行映射，首先它要实例化目标对象，实例化的方式是通过默认的对象工厂DefaultObjectFactory
		 通过反射的方式进行的，它只实例化目标对象不会干别的，但这已能满足大部分的需求。如果有对实体类实例化有特殊的要求可以自定义对象工厂，参见com.asiainfo.MyObjectFactory
	 -->
<!-- 	<objectFactory type="com.asiainfo.MyObjectFactory"> -->
<!-- 		<property name="url" value="localhost"/> -->
<!-- 		<property name="port" value="3306"/> -->
<!-- 	</objectFactory> -->
	
	<!-- 插件（略） -->
<!-- 	<plugins> -->
<!-- 		<plugin interceptor=""></plugin> -->
<!-- 	</plugins> -->

	<environments default="dev">	<!-- 这个类似于maven的profile -->
		<environment id="dev">
			<transactionManager type="JDBC"></transactionManager>
			<dataSource type="POOLED">	<!-- 下面的四个属性是org.apache.ibatis.datasource.pooled.PooledDataSource的四个属性 -->
				<property name="driver" value="${db.driver}" />
				<property name="url" value="${db.url}" />
				<property name="username" value="${db.username}" />
				<property name="password" value="${db.password}" />
			</dataSource>
		</environment>
		<environment id="prod">	<!-- 不同的环境可以配置不同的数据源 -->	
			<transactionManager type="JDBC"></transactionManager>
			<dataSource type="POOLED">
				<property name="driver" value="${db.driver}" />
				<property name="url" value="${db.url}" />
				<property name="username" value="${db.username}" />
				<property name="password" value="${db.password}" />
			</dataSource>
		</environment>
	</environments>

	<!-- 映射器配置 -->
	<mappers>
		<mapper resource="mapper/UserMapper.xml" />	<!-- 如果有很多mapper需要配置会导致<mapper>标签很多，可以使用简洁的配置方式：<package> -->
		<!-- 使用<package>标签需要满足四个条件：
			 1) 映射文件要与Dao接口在同一个包下，即mapper的java文件和xml文件在同一包下
 			 2) 映射文件名要与Dao接口的简单类名相同
 			 3) 映射文件的<mapper/>标签的namespace属性值为Dao接口的全限定性类名
 			 4) 使用动态Mapper
		 -->
<!-- 		<package name="com.asiainfo.mapper"/> -->
	</mappers>
</configuration>