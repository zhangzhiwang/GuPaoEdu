spring:
  application:
    name: GuPaoEdu-SpringCloudNetflix-Provider-Product  #本工程是产品微服务的生产者
#  cloud:
#    config:
#      discovery:
#        enabled: true #启动配置发现，作为config的客户端需要向服务端请求获取配置
#        #配置中心服务端的名字，这个名字是eureka上注册的配置中心的Application名称，该名称如果在config服务端没有特别指定的话默认为${spring.application.name}，这就是为什么config服务端也必须注册到注册中心的原因
#        service-id: GUPAOEDU-SPRINGCLOUDNETFLIX-CONFIG-SERVER
#      profile: dev  #指定配置文件的profile。默认情况下，config客户端会去请求文件名为${spring.application.name}-${spring.cloud.config.profile}.properties，如本工程的GuPaoEdu-SpringCloudNetflix-Provider-Product-dev.properties
#      label: main #默认是到master分支去取配置文件，如果不是master分支需要指定。注意：请求的外部配置文件如果有和bootstrap.yml同名的属性，那么bootstrap的属性会被覆盖
      #配置文件的合并：假如有三个环境的配置文件，分别是abc-dev.yml、abc-test.yml、abc-prod.yml，那么如果这些配置文件里面有一些公共的配置，可以把这些公共的配置抽取出来放在一个公共的配置文件里，这个配置文件的命名就是原有的名字去掉后面的环境信息即可，比如abc.yml，
      #这样访问任意带环境的配置文件都会自动读取公共配置文件里的属性
#  kafka:
#    bootstrap-servers:
#    - localhost:9092
#    consumer:
#      group-id: conf-s
      
      
#config客户端也要注册到eureka 
eureka: 
  client:
    service-url:
      defaultZone: http://localhost:8987/eureka #,http://localhost:8988/eureka,http://localhost:8989/eureka
    register-with-eureka: true
    fetch-registry: true
      
server:
  port: 8081  #远端的配置文件中如果属性和bootstrap.yml同名，那么bootstrap.yml中的同名属性会被覆盖
#  
#eureka:
#  client:
#    service-url:
#      defaultZone: http://localhost:8987/eureka,http://localhost:8988/eureka,http://localhost:8989/eureka #配置集群的所有节点以防单点故障
#    register-with-eureka: true  #本工程作为服务的提供者必须系那个eureka注册自己
#    fetch-registry: false #有无本工程不需要最为消费者来调用服务作为不需要从eureka获取注册信息
#    
product1: 
  name: Apple
  
#通过actuator实现配置的动态刷新。步骤：1、引入spring-boot-starter-actuator依赖 2、配置文件暴露refresh的endpoint 3、在需要动态刷新的地方添加注解@RefreshScope 4、用post请求路径/actuator/refresh即可
#management:
#  endpoints:
#    web:
#      exposure:
#        include:
#        - refresh
       
#各微服务要配置和config server端一样的kafka配置以使spc bus的动态刷新生效，原理就是监听kafka的topic
