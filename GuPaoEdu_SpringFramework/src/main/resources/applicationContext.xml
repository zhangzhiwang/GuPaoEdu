<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
		
	<!-- xml配置bean的常用方法 -->
<!-- 	<bean id="user1,user2,user3" name="u1,u2,u3" class="com.asiainfo.entity.User"></bean> -->
<!-- 	<bean id="user1" name="u1" class="com.asiainfo.entity.User" primary="true"></bean> -->
<!-- 	<bean id="user2" name="u2" class="com.asiainfo.entity.User"></bean> -->
<!-- 	<bean id="product" name="p1" class="com.asiainfo.entity.Product"></bean> -->
	
	<!-- xml配置bean的非常用方法：配置静态工程和动态工厂 -->
	<!-- 静态工厂 -->
	<!-- 注意class是静态工厂的全限定名，但id是工厂所生产的对象的名称而不是工厂的名称 -->
<!-- 	<bean id="userStatic" class="com.asiainfo.factory.StaticFactory" factory-method="getUserByStatic"></bean> -->
	
	<!-- 动态工厂 -->
	<!-- 通过动态工厂注入首先要配置一个动态工厂的bean，此时bean的id是动态工厂的名称，然后再配置工厂所生产对象的bean，并用factory-bean属性引用动态工厂对象 -->
<!-- 	<bean id="dynamicFactory" class="com.asiainfo.factory.DynamicFactory"></bean> -->
<!-- 	<bean id="userDynamic" factory-bean="dynamicFactory" factory-method="getUserByDynamic"></bean> -->

	<!-- 属性注入，属性注入的方式有两种：一个是通过构造器注入，一个是通过setter方法注入 -->
	<!-- 构造器注入方式1——通过入參名称注入，需要该类有相应的构造器 -->
<!-- 	<bean id="user4" class="com.asiainfo.entity.User"> -->
<!-- 		<constructor-arg name="name" value="zhaoliu"></constructor-arg> -->
<!-- 		<constructor-arg name="age" value="22"></constructor-arg> -->
<!-- 	</bean> -->
	<!-- 构造器注入方式1——通过入參名称注入（简写），简写的方式需要引入“xmlns:c”命名空间 -->
<!-- 	<bean id="user4" class="com.asiainfo.entity.User" c:name="赵六" c:age="23"></bean> -->
	
	<!-- 构造器注入方式2——通过参数顺序注入，需要该类有相应的构造器 -->
<!-- 	<bean id="user5" class="com.asiainfo.entity.User"> -->
<!-- 		<constructor-arg index="0" value="zhaoliu"></constructor-arg> -->
<!-- 		<constructor-arg index="1" value="22"></constructor-arg> -->
<!-- 	</bean> -->
	<!-- 构造器注入方式1——通过参数顺序注入（简写），简写的方式需要引入“xmlns:c”命名空间 -->
<!-- 	<bean id="user5" class="com.asiainfo.entity.User" c:_0="赵六" c:_1="23"></bean> -->
	
	<!-- setter方式注入，需要有相应属性的setter方法 -->
<!-- 	<bean id="user6" class="com.asiainfo.entity.User"> -->
<!-- 		<property name="name" value="张三"></property> -->
<!-- 		<property name="age" value="24"></property> -->
<!-- 	</bean> -->
	<!-- setter方式注入（简写），简写的方式需要引入“xmlns:p”命名空间 -->
<!-- 	<bean id="user6" class="com.asiainfo.entity.User" p:name="李四" p:age="25"></bean> -->

	<!-- 各种常见属性的注入 -->
<!-- 	<bean id="user7" class="com.asiainfo.entity.User"> -->
<!-- 		<property name="product" ref="product"> -->
<!-- 			<bean class="com.asiainfo.entity.Product" p:productId="2" p:productName="Huawei"></bean> -->
<!-- 		</property> -->
<!-- 		<property name="hobbies"> -->
<!-- 			<array> -->
<!-- 				<value>钢琴</value> -->
<!-- 				<value>羽毛球</value> -->
<!-- 			</array> -->
<!-- 		</property> -->
<!-- 		<property name="products"> -->
<!-- 			<list> -->
<!-- 				<bean class="com.asiainfo.entity.Product" p:productId="3" p:productName="Xioami"></bean> -->
<!-- 				<bean class="com.asiainfo.entity.Product" p:productId="4" p:productName="Vivo"></bean> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 		<property name="myMap"> -->
<!-- 			<map> -->
<!-- 				<entry key="username" value="root"></entry> -->
<!-- 				<entry key="password" value="root123"></entry> -->
<!-- 			</map> -->
<!-- 		</property> -->
<!-- 		<property name="properties"> -->
<!-- 			<props> -->
<!-- 				<prop key="url">localhost</prop> -->
<!-- 				<prop key="port">8080</prop> -->
<!-- 			</props> -->
<!-- 		</property> -->
<!-- 	</bean> -->
<!-- 	<bean id="product" class="com.asiainfo.entity.Product" p:productId="1" p:productName="Apple"></bean> -->

<!-- 	<bean id="userController" class="com.asiainfo.controller.UserController"> -->
<!-- 		<property name="userService" ref="userService"></property> -->
<!-- 	</bean> -->
<!-- 	<bean id="userService" class="com.asiainfo.service.impl.UserServiceImpl" p:userDao-ref="userDao"></bean> -->
<!-- 	<bean id="userDao2" class="com.asiainfo.dao.impl.UserDaoImpl"></bean> -->

<!-- 	<context:component-scan base-package="com.asiainfo"></context:component-scan> -->
	<!-- 如果需要扫描多个包可以有两种方式 -->
	<!-- 方式1:使用多个<context:component-scan>标签，每个标签配置一个包 -->
	<!-- @Controller、@Service、@Repository本质上都是@Component，它们之间可以混用。之所以它们之间可以混用是因为使用的是默认过滤器，但是混用会对代码的可读性带来误解，所以可以限制某一层用什么注解。 -->
	<!-- <context:component-scan base-package="com.asiainfo.controller" use-default-filters="false"> -->	<!-- 如果规定controller层只能使用@Controller注解，必须关掉默认过滤器 -->
		<!-- 使用context:include-filter标签，expression的值是@Controller的全限定名，type使用annotation，这样controller层只能使用@Controller注解 -->
<!-- 		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
<!-- 	</context:component-scan> -->
<!-- 	<context:component-scan base-package="com.asiainfo.service" use-default-filters="true"> -->
		<!-- service层使用默认过滤器，但是使用了context:exclude-filter标签，表示service包下的类不能使用@Controller注解，但是可以混用其他注解 -->
<!-- 		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
<!-- 	</context:component-scan> -->
<!-- 	<context:component-scan base-package="com.asiainfo.dao"></context:component-scan> -->
	<!-- 方式2：base-package属性配置多个包并用逗号分割 -->
<!-- 	<context:component-scan base-package="com.asiainfo.controller,com.asiainfo.service,com.asiainfo.dao"></context:component-scan> -->

	<!-- <bean id="product" class="com.asiainfo.entity.Product" lazy-init="true"></bean> -->	<!-- 延迟加载 -->
	
	<!-- 以配置的方式使用事务 -->
	<context:property-placeholder location="classpath:db.properties"/>
<!-- 	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
<!-- 		<property name="driverClassName" value="${db.driver}"></property> -->
<!-- 		<property name="url" value="${db.url}"></property> -->
<!-- 		<property name="username" value="${db.username}"></property> -->
<!-- 		<property name="password" value="${db.password}"></property> -->
<!-- 	</bean> -->
	<!-- 使用druid数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<!-- 数据库连接池的必要配置 -->
		<property name="driverClassName" value="${db.driver}"></property>
		<property name="url" value="${db.url}"></property>
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
		<!-- 和单独使用druid一样（见DruidTest.java），和spring整合后连接池的非必要配置在配置文件中进行 -->
		<property name="initialSize" value="5"></property>
		<property name="minIdle" value="5"></property>
		<property name="maxActive" value="30"></property>
		<property name="maxWait" value="1000"></property>
		<property name="minEvictableIdleTimeMillis" value="400000"></property>
		<!-- 开启监控统计 -->
		<!-- 监控Filter的别名在druid.jar的/META-INF/druid-filter.properties里面 -->
		<property name="filters" value="stat"></property>
	</bean>
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
<!-- 	<tx:advice id="advice1" transaction-manager="txManager"> -->
<!-- 		<tx:attributes> -->
<!-- 			<tx:method name="service*" propagation="REQUIRED" isolation="DEFAULT"/> -->
<!--             other methods use the default transaction settings (see below) -->
<!--             <tx:method name="*"/> -->
<!-- 		</tx:attributes> -->
<!-- 	</tx:advice> -->
<!-- 	<aop:config> -->
<!-- 		<aop:pointcut expression="execution(* com.asiainfo.transaction.TxService.serviceMethod(..))" id="pointcut1"/> -->
<!-- 		<aop:advisor advice-ref="advice1" pointcut-ref="pointcut1"/> -->
<!-- 	</aop:config> -->
<!-- 	<bean id="txService" class="com.asiainfo.transaction.TxService"> -->
<!-- 		<property name="dao1" ref="dao1"></property> -->
<!-- 		<property name="dao2" ref="dao2"></property> -->
<!-- 	</bean> -->
<!-- 	<bean id="dao1" class="com.asiainfo.transaction.Dao1"></bean> -->
<!-- 	<bean id="dao2" class="com.asiainfo.transaction.Dao2"></bean> -->

	<!-- 以注解的方式使用事务 -->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<!-- 
		为什么在Spring的配置文件里面context:component-scan标签的属性use-default-filters设置为true，然后子标签用exclude-filter；而mvc的配置文件里面use-default-filters为false，子标签用include-filter呢？
		我们要达到这样一个效果：Spring要扫描除@Controller外的所有注解，mvc只扫描@Controller注解不能扫描别的。
		use-default-filters的默认值是true，即扫描所有@Component的注解（当然还有两外连两个，下面会提到），然后在这些注解里面排除掉exclude-filter配置的注解；
		use-default-filters如果设置为false，那么就不扫描任何注解，只扫描用户自定义的注解，即用include-filter制定的注解。
		
		结合源码层面，与context:component-scan相对应的源码在org.springframework.context.config.ContextNamespaceHandler的第38行：
		1、找到第38行，进入ComponentScanBeanDefinitionParser类
		2、这个类里面只有一个pbluc方法——parse方法，所以就看这个方法
		3、parse方法的关键在于89行的configureScanner方法
		4、进入configureScanner方法可以看到useDefaultFilters的默认值是true，如果用户配置了就用用户配置的值，然后将此值传给了第103行的createScanner方法
		5、进入createScanner方法，接着进入ClassPathBeanDefinitionScanner的构造方法
		6、进入ClassPathBeanDefinitionScanner的构造方法之后关键代码在第165行，如果是true，那么就执行registerDefaultFilters方法，否则不执行，那么关键就在registerDefaultFilters方法了
		7、进入registerDefaultFilters方法可以看到，默认将@Component、ManagedBean和Named加入到ClassPathScanningCandidateComponentProvider的includeFilters属性里面，
		   而@Controller、@Service、@Repository的本质就是@Component，所以在默认情况下（即use-default-filters=true的时候）会扫描所有注解。如果use-default-filters为false，那么本方法不会执行，也就是includeFilters的值就是空。
		8、逐步返回到ComponentScanBeanDefinitionParser.configureScanner方法的第125行，进入parseTypeFilters方法
		9、进入该方法可以看到如果用户配置了exclude或者include的自标签，那么会将相应标签的值放入ClassPathScanningCandidateComponentProvider的includeFilters属性里面或者excludeFilters属性里面。
		   如果use-default-filters为false，那么现在includeFilters里面只有用户在include自标签里面配置的注解
		10、（如果use-default-filters=true，那么什么时候从includeFilters里面把excludeFilters的注解排除掉就不知道了，尚且没有找到相关的源码）
		至此，应该知道为什么spring的配置文件里面的use-default-filters要为true，而且使用exclude-filter把@Controller注解排除掉了，还有为什么mvc的配置文件里面use-default-filters为false，使用include-filter自标签将@Controller注解注解添加进去了
	 -->
	<!-- 注意：spring和Springmvc整合之后，controller必须由mvc来扫描，注意是“必须”不是“可以”。
		以为mvc和spring是两个ioc容器，controller层的bean必须要放到mvc的容器中，这样前端控制器才能通过处理器映射器找到对应的处理器，找到对应处理器的前提是处理器映射器得知道有哪些处理器，处理器映射器是mvc容器中去找所有处理器的。
		如果controller的bean放到了Spring的ioc容器里，那么处理器映射器永远不会找到处理器，也就永远报404。所以mvc的配置文件（至少）要扫描controller层。
	 -->		
	<context:component-scan base-package="com.asiainfo" use-default-filters="true">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 集成mybatis
		步骤：
		1、引入三个依赖：spring-orm、mybais、mybatis-spring
		2、编写mybatis全局配置文件和Spring全局配置文件，其中mybatis的配置文件里面可以去掉数据源部分，采用Spring的数据源
		3、将mybatis全局配置文件配置到spring全局配置文件中，配置方式如下两步：SqlSessionFactoryBean和MapperScannerConfigurer，这两个类都在mybatis-spring的jar包里面
	 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>	<!-- 引入数据源 -->
		<property name="configLocation" value="classpath:myBatis-config.xml"></property>	<!-- 配置mybatis全局配置文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>		<!-- 配置mapper xml文件的位置 -->
	</bean>
	
	<!-- 此配置将mapper的java接口识别为Spring的bean -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">	
		<property name="basePackage" value="com.asiainfo.mapper,com.asiainfo.springSecurity"></property>
	</bean>
	
	<!-- 注意：Spring和spring MVC集成的时候不需要把mvc的配置文件引入到Spring的配置文件中，这两个文件可以完全无关，因为在web.xml中配置了两个文件，并且Spring MVC的IOC容器把Spring的IOC容器设置为父容器
			SSM整合：mybatis的配置文件需要和Spring的配置文件整合，sping mvc的配置文件不需要和Spring的配置文件整合
	 -->	
<!-- 	<import resource="classpath:springmvc.xml"/> -->

	<!-- 整合swagger，实际上就是放开springfox-swagger-ui.jar中的静态资源不被拦截，实际上就是mvc对静态资源的配置 -->
<!-- 	<mvc:resources location="classpath:META-INF/resources/" mapping="swagger-ui.html"></mvc:resources> -->
<!-- 	<mvc:resources location="classpath:META-INF/resources/webjars/" mapping="/webjars/**"></mvc:resources> -->
	<!--将静态资源交由默认的servlet处理-->
<!--     <mvc:default-servlet-handler/> -->
    
<!--     <bean class="com.asiainfo.controller.SwaggerConfig"></bean> -->

	<!-- spring整合quartz
		 步骤：
		 1、定义Job（写代码）
		 2、定义JobDetail（配置文件里面配置）
		 3、定义Trigger并绑定Job（配置文件里面配置）
		 4、定义Scheduler并将Trigger注册进来（配置文件里面配置）
		 相较于单独使用quartz，和Spring整合之后只有定义Job使用代码来实现的，其余的都是在配置文件里面配置，而前者以上四步都是在代码里面实现的，见QuartzTest
	 -->
	<!-- 定义JobDetail -->
	<bean id="jobDetail1" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="name" value="jobDetail1"></property>
		<property name="group" value="jobDetailInSpringGroup1"></property>
		<property name="jobClass" value="com.asiainfo.quartz.MyJob1"></property>
		<!-- 必须设置为true，如果设置为false（默认是false），当没有活动的触发器与之关联时会在调度器中删除该任务 -->
		<property name="durability" value="true"></property>
	</bean>
	<bean id="jobDetail2" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="name" value="jobDetail2"></property>
		<property name="group" value="jobDetailInSpringGroup2"></property>
		<property name="jobClass" value="com.asiainfo.quartz.MyJob2"></property>
		<!-- 必须设置为true，如果设置为false（默认是false），当没有活动的触发器与之关联时会在调度器中删除该任务 -->
		<property name="durability" value="true"></property>
	</bean>
	<!-- 定义Trigger -->
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="name" value="simpleTrigger"></property>
		<property name="group" value="triggerInSpringGroup1"></property>
		<property name="jobDetail" ref="jobDetail1"></property>
		<property name="startDelay" value="1000"></property>
		<property name="repeatInterval" value="1000"></property>
		<property name="repeatCount" value="10"></property>
	</bean>
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="name" value="cronTrigger"></property>
		<property name="group" value="triggerInSpringGroup2"></property>
		<property name="jobDetail" ref="jobDetail2"></property>
		<!-- 
		quartz中的cron表达式，一共6-7为，其中第七位年份是可选位：
		秒 分钟 小时 日期 月份 星期 （年份）
		符号：
		星号(*)：可用在所有字段中，表示对应时间域的每一个时刻，例如，在分钟字段时，表示“每分钟”； 
		问号（?）：该字符只在日期和星期字段中使用，它通常指定为“无意义的值”，相当于点位符； 
		减号(-)：表达一个范围，如在小时字段中使用“10-12”，则表示从 10 到 12 点，即 10,11,12； 
		逗号(,)：表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五； 
		斜杠(/)：x/y 表达一个等步长序列，x 为起始值，y 为增量步长值。如在分钟字段中使用 0/15，则表示为 0,15,30 和 45 秒，而 5/15 在分钟字段中表示 5,20,35,50，你也可以使用*/y，它等同于 0/y
		 -->
		<property name="cronExpression" value="0/3 * * * * ?"></property>
	</bean>
	
	<!-- 定义Scheduler -->
<!-- 	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> -->
<!-- 		<property name="triggers"> -->
<!-- 			<list> -->
<!-- 				<ref bean="simpleTrigger"/> -->
<!-- 				<ref bean="cronTrigger"/> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	<!-- 开源认证授权框架——shiro -->
<!-- 	<import resource="classpath:shiro.xml"/> -->
	<!-- 开源认证授权框架——Spring Security -->
	<import resource="classpath:springSecurity.xml"/>
</beans>