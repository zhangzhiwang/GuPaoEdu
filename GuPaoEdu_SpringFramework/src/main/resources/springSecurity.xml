<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.3.xsd">
    
    <!-- Spring Security是Spring提供的认证授权的解决方案，它是基于aop实现的，所以要引入aop的相关依赖。
    	 集成spring security的步骤：
    	 1、引入相关依赖：spring-security-config、spring-security-taglibs
    	 2、web.xml里面配置security的过滤器
    	 3、编写spring security的配置文件
     -->
     
    <!-- 配置常用静态资源不被拦截，注意这个配置的顺序要放在前面 -->
    <security:http pattern="/css/**" security="none"></security:http>
    <security:http pattern="/js/**" security="none"></security:http>
    <security:http pattern="/img/**" security="none"></security:http>
    
    <!-- 使用授权注解：Spring security支持三种授权注解：jsr-250（需引入jsr250-api依赖）、Spring表达式（需要aop支持）、Spring security提供的注解。
    	 jsr250-annotations：支持jsr-250注解
    	 pre-post-annotations：支持Spring表达式
    	 secured-annotations：支持Spring security提供的注解
     -->
    <security:global-method-security jsr250-annotations="enabled" pre-post-annotations="enabled" secured-annotations="enabled"></security:global-method-security>
    
    <!-- 
    	auto-config：是否使用自动配置，也就是spring security的默认配置，其中包括使用spring内置的登陆页面
    	use-expressions：是否支持Spring的EL表达式
     -->
    <security:http auto-config="true" use-expressions="true">
    	<!-- 让登陆页面可以匿名访问 -->
    	<security:intercept-url pattern="/loginWithSpringSecurity.jsp" access="permitAll()"/>
    	<security:intercept-url pattern="/success.jsp" access="permitAll()"/>
    	<security:intercept-url pattern="/role.jsp" access="permitAll()"/>
    	<!-- 
    		pattern：指定拦截什么样的url
    		access：授权，hasAnyRole()表示指定的角色有任意一个即可，这里指定的只有一个admin
    	 -->
<!--     	<security:intercept-url pattern="/**" access="hasAnyRole('admin_insert')"/> -->
    	<security:intercept-url pattern="/**" access="permitAll()"/>
    	
    	<!-- 
    		login-page：登陆页面
    		login-processing-url：登陆页面点击提交按钮所访问的url
    		default-target-url：默认目标跳转url
    		authentication-failure-url：登陆失败跳转的url
    	 -->
    	<security:form-login 
    		login-page="/loginWithSpringSecurity.jsp"
    		login-processing-url="/login"
    		default-target-url="/success.jsp"
    		authentication-failure-url="/loginFailed.jsp"
    		/>
    		
<!--     	<security:csrf disabled="true"/> -->
		<security:access-denied-handler error-page="/403.jsp"/>
    </security:http>
    
    <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
    <security:authentication-manager>
    	<security:authentication-provider user-service-ref="authServiceImpl">
    		<!-- 配置用户名、密码、角色，其中密码Spring security是默认加密的，如果不想加密要在密码的前面加上{noop} -->
<!--     		<security:user-service> -->
<!--     			<security:user name="liming" authorities="admin" password="{noop}123456"/> -->
<!--     			<security:user name="zhangsan" authorities="admin" password="{noop}111"/> -->
<!--     		</security:user-service> -->
			<security:password-encoder ref="bCryptPasswordEncoder"/>
    	</security:authentication-provider>
    </security:authentication-manager>
</beans>