<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>
  
  <!-- 
  	下面分别配置了Spring的ContextLoaderListener和mvc的DispatcherServlet，那么谁先被加载呢？
  	*根据servlet规范，加载顺序是listener -> filter -> servlet，但是在加载listener之前会先初始化全局的ServletContext，后续在web.xml里面加载的所有部分都将共享这个上下文。
   -->
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  <!-- 配置Spring的ContextLoaderListener
  	   一个项目要想使用Spring框架就必须在web.xml中配置ContextLoaderListener，该类继承了ContextLoader并实现了ServletContextListener接口
  	   1、ContextLoader的作用：在应用程序启动的时候初始化ioc容器。该类有一个属性叫contextConfigLocation，需要外部进行配置，所以上面配置了contextConfigLocation，具体可以参考ContextLoaderListener无參构造器上面的注释，这也就是为什么要在<context-param>里面配置ContextLoaderListener。
  	   2、ServletContextListener接口的作用：将初始化好的ioc容器放在具有全局生命周期的ServletContext里面，这样只要能获取到Servlet就能拿到ioc容器，从而得到里面的bean
  	   
  	   具体过程：
  	   1、初始化ContextLoaderListener类就要先初始化其父类ContextLoader，ContextLoader有一个属性叫做contextConfigLocation，根据该属性的注释可以看出它是需要用户进行配置的来制定配置文件的位置，就是上面context-param配置的内容
  	   2、进入ContextLoaderListener.contextInitialized()
  	   3、进入ContextLoader.initWebApplicationContext()，279行创建WebApplicationContext对象（即ioc容器），由于WebApplicationContext的父容器是null所以要设置父容器，但是父容器又设置为了null，所以spring的ioc容器的父容器是null，下面292行是关键代码
  	   4、进入configureAndRefreshWebApplicationContext方法，第389行将上面制定的contextConfigLocation文件路径设置了进去，关键代码是401行，进入refresh方法可以看到经典的ioc初始化的模版方法模式，所以此步是初始化ioc容器
  	   5、返回到上一层，即initWebApplicationContext方法里面，看295行，将上面初始化完成的ioc容器（WebApplicationContext）作为一个属性（key为org.springframework.web.context.WebApplicationContext.ROOT）放到全局生命周期的servletContext里面，这样外部只要拿到servletContext就可以得到ioc容器。
  	      所以，这里做一下小结：ContextLoaderListener的作用就是在服务启动的时候初始化ioc容器，并将容器放到具有全局生命周期的servletContext里面
  	   6、当客户端第一次访问的时候会进行servlet初始化，由于servlet配置的是DispatcherServlet，所以DispatcherServlet是第一次访问的时候才初始化的
  	   7、DispatcherServlet的初始化过程见GuPaoEdu_SpringMVC工程的web.xml笔记，这里不再赘述。这里要说的关键是：HttpServletBean的init方法里面的第170行initServletBean方法
  	   8、进入initServletBean方法（进入子类FrameworkServlet的initServletBean方法），530行initWebApplicationContext方法
  	   9、进入initWebApplicationContext方法，561行WebApplicationContextUtils.getWebApplicationContext()
  	   10、进入getWebApplicationContext()方法，可以看到是从ServletContext里面取出key为org.springframework.web.context.WebApplicationContext.ROOT的属性，正是上面的spring ioc容器对象
  	   11、返回到FrameworkServlet.initWebApplicationContext()方法，576行，将上面返回的spring ioc容器设置为当前ioc容器（mvc的ioc容器）的父容器，即Spring ioc容器是mvc ioc容器的父容器，当然这是在mvc的ioc容器不为空的情况下。
  	  	   如果mvc的ioc容器为空，会进入591行，先创建mvc的ioc容器在设置Spring的ioc容器为其父容器。
  	   所以，spring的ioc容器和Spring mvc的ioc容器是两个ioc容器，并且前者是后者的父容器，在Spring的机制中，自容器能够访问父容器的对象，反之则不行。这样就从技术上限制了controller层可以访问（引用）service层，但是反过来就会报错
   -->
  <listener>
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <servlet>
  	<servlet-name>springmvc</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<init-param>
  		<param-name>contextConfigLocation</param-name>
  		<param-value>classpath:springmvc.xml</param-value>
  	</init-param>
  </servlet>
  <servlet-mapping>
  	<servlet-name>springmvc</servlet-name>
  	<url-pattern>/</url-pattern>
  </servlet-mapping>
  
  <!-- 解决中文乱码 -->
  <filter>
  	<filter-name>encodeFilter</filter-name>
  	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
  	<init-param>
  		<param-name>encoding</param-name>
  		<param-value>utf-8</param-value>
  	</init-param>
  	<init-param>
  		<param-name>forceRequestEncoding</param-name>
  		<param-value>true</param-value>
  	</init-param>
  	<init-param>
  		<param-name>forceResponseEncoding</param-name>
  		<param-value>false</param-value>
  	</init-param>
  </filter>
  <filter-mapping>
  	<filter-name>encodeFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
</web-app>
