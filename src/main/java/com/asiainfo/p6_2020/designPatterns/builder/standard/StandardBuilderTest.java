package com.asiainfo.p6_2020.designPatterns.builder.standard;

/**
 * 建造者模式（标准版）</p>
 * 标准版的建造者模式有这么几个角色：</p>
 * 1、产品</p>
 * 2、抽象建造者：制定构造一个产品的标准和步骤</p>
 * 3、建造者实现：按照抽象建造者的标准来建造一个具体产品的角色</p>
 * 4、指挥者：控制抽象建造者制定标准的实现步骤之间的顺序</p>
 * 抽象建造者和指挥者的区别：抽象建造者的作用就是制定一个规范，这个规范规定了生产一个产品有哪些步骤，实现了这些步骤产品就创建出来了，但是这里制定的步骤是没有顺序的。一个抽象建造者是一个接口，它制定的规范都是一个一个的接口方法，但是这些方法时间是没有顺序的，它不能控制调用方调用接口的顺序。</p>
 * 比如生产一个机器人，抽象建造者规定生产一个机器人一共有三个步骤：建造头、建造躯干、建造四肢，最后组装成一个机器人，在接口里对应4个抽象方法，任何具体的建造者都必须实现这四个方法，但是它约束不了的是调用方先调哪个接口后调用哪个，我可以先建造头然后建造躯干，也可以反过来。如果这几个步骤之间没有依赖关系就没问题，如果有先后依赖关系，那么抽象构造者是无能为力的。这就需要指挥者上场了。<p>
 * 指挥者控制抽象建造者规定各步骤的顺序，仅此而已。
 *
 * @author zhangzhiwang
 * @date Mar 12, 2020 7:35:34 PM
 */
public class StandardBuilderTest {
	public static void main(String[] args) {
		Builder builder = new BenzBuilder();// new AudiBuilder();
		Director director = new Director(builder);
		Car car = director.createACar();
		System.out.println(car);
		
		/**
		 * 建造者模式和工厂模式的区别，一句话：建造者模式关注的重点是建造的过程，对创建对象的过程进行干预，而工厂模式关注结果，只要创建出符合要求的对象即可，还有一点就是建造者模式用户可以选择配置而工厂模式不行</p>
		 * 建造者模式的实际应用：StringBuilder、MyBatis中的SqlSessionFactoryBuilder
		 */
		
		/**
		 * 国际惯例——优缺点：</p>
		 * 优点是建造者模式属于创建型模式，都是将对象的创建和使用分离，是客户端无需关系创建对象的过程；缺点就是一个产品就要增加一个Builder类，使类的数量增加，而且如果产品结构进行调整那势必会导致对Builder类实现的修改
		 */
	}
}
